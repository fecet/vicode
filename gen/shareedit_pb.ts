// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file shareedit.proto (package shareedit, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file shareedit.proto.
 */
export const file_shareedit: GenFile = /*@__PURE__*/
  fileDesc("Cg9zaGFyZWVkaXQucHJvdG8SCXNoYXJlZWRpdCJpChJUZXh0Q29udGVudE1lc3NhZ2USDgoGc2VuZGVyGAEgASgJEgwKBHBhdGgYAiABKAkSDAoEdGV4dBgDIAEoCRITCgtjdXJzb3JfbGluZRgEIAEoBRISCgpjdXJzb3JfY29sGAUgASgFIksKEEN1cnNvclBvc01lc3NhZ2USDgoGc2VuZGVyGAEgASgJEgwKBHBhdGgYAiABKAkSDAoEbGluZRgDIAEoBRILCgNjb2wYBCABKAUibQoTU2VsZWN0aW9uUG9zTWVzc2FnZRISCgpzdGFydF9saW5lGAEgASgFEhEKCXN0YXJ0X2NvbBgCIAEoBRIQCghlbmRfbGluZRgDIAEoBRIPCgdlbmRfY29sGAQgASgFEgwKBHBhdGgYBSABKAkiNgoVRXhlY3V0ZUNvbW1hbmRNZXNzYWdlEg8KB2NvbW1hbmQYASABKAkSDAoEYXJncxgCIAMoCSIHCgVFbXB0eTLWBAoQU2hhcmVFZGl0U2VydmljZRJCCg9TZW5kVGV4dENvbnRlbnQSHS5zaGFyZWVkaXQuVGV4dENvbnRlbnRNZXNzYWdlGhAuc2hhcmVlZGl0LkVtcHR5Ej4KDVNlbmRDdXJzb3JQb3MSGy5zaGFyZWVkaXQuQ3Vyc29yUG9zTWVzc2FnZRoQLnNoYXJlZWRpdC5FbXB0eRJEChBTZW5kU2VsZWN0aW9uUG9zEh4uc2hhcmVlZGl0LlNlbGVjdGlvblBvc01lc3NhZ2UaEC5zaGFyZWVkaXQuRW1wdHkSSAoSU2VuZEV4ZWN1dGVDb21tYW5kEiAuc2hhcmVlZGl0LkV4ZWN1dGVDb21tYW5kTWVzc2FnZRoQLnNoYXJlZWRpdC5FbXB0eRJJChJSZWNlaXZlVGV4dENvbnRlbnQSHS5zaGFyZWVkaXQuVGV4dENvbnRlbnRNZXNzYWdlGhAuc2hhcmVlZGl0LkVtcHR5KAEwARJFChBSZWNlaXZlQ3Vyc29yUG9zEhsuc2hhcmVlZGl0LkN1cnNvclBvc01lc3NhZ2UaEC5zaGFyZWVkaXQuRW1wdHkoATABEksKE1JlY2VpdmVTZWxlY3Rpb25Qb3MSHi5zaGFyZWVkaXQuU2VsZWN0aW9uUG9zTWVzc2FnZRoQLnNoYXJlZWRpdC5FbXB0eSgBMAESTwoVUmVjZWl2ZUV4ZWN1dGVDb21tYW5kEiAuc2hhcmVlZGl0LkV4ZWN1dGVDb21tYW5kTWVzc2FnZRoQLnNoYXJlZWRpdC5FbXB0eSgBMAFCYwoNY29tLnNoYXJlZWRpdEIOU2hhcmVlZGl0UHJvdG9QAaICA1NYWKoCCVNoYXJlZWRpdMoCCVNoYXJlZWRpdOICFVNoYXJlZWRpdFxHUEJNZXRhZGF0YeoCCVNoYXJlZWRpdGIGcHJvdG8z");

/**
 * TextContent message for sharing text between vim and vscode
 *
 * @generated from message shareedit.TextContentMessage
 */
export type TextContentMessage = Message<"shareedit.TextContentMessage"> & {
  /**
   * "vscode" or "vim"
   *
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * file path
   *
   * @generated from field: string path = 2;
   */
  path: string;

  /**
   * file content
   *
   * @generated from field: string text = 3;
   */
  text: string;

  /**
   * cursor line position
   *
   * @generated from field: int32 cursor_line = 4;
   */
  cursorLine: number;

  /**
   * cursor column position
   *
   * @generated from field: int32 cursor_col = 5;
   */
  cursorCol: number;
};

/**
 * Describes the message shareedit.TextContentMessage.
 * Use `create(TextContentMessageSchema)` to create a new message.
 */
export const TextContentMessageSchema: GenMessage<TextContentMessage> = /*@__PURE__*/
  messageDesc(file_shareedit, 0);

/**
 * CursorPos message for sharing cursor position
 *
 * @generated from message shareedit.CursorPosMessage
 */
export type CursorPosMessage = Message<"shareedit.CursorPosMessage"> & {
  /**
   * "vscode" or "vim"
   *
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * file path
   *
   * @generated from field: string path = 2;
   */
  path: string;

  /**
   * line position
   *
   * @generated from field: int32 line = 3;
   */
  line: number;

  /**
   * column position
   *
   * @generated from field: int32 col = 4;
   */
  col: number;
};

/**
 * Describes the message shareedit.CursorPosMessage.
 * Use `create(CursorPosMessageSchema)` to create a new message.
 */
export const CursorPosMessageSchema: GenMessage<CursorPosMessage> = /*@__PURE__*/
  messageDesc(file_shareedit, 1);

/**
 * SelectionPos message for sharing selection position
 *
 * @generated from message shareedit.SelectionPosMessage
 */
export type SelectionPosMessage = Message<"shareedit.SelectionPosMessage"> & {
  /**
   * selection start line
   *
   * @generated from field: int32 start_line = 1;
   */
  startLine: number;

  /**
   * selection start column
   *
   * @generated from field: int32 start_col = 2;
   */
  startCol: number;

  /**
   * selection end line
   *
   * @generated from field: int32 end_line = 3;
   */
  endLine: number;

  /**
   * selection end column
   *
   * @generated from field: int32 end_col = 4;
   */
  endCol: number;

  /**
   * file path
   *
   * @generated from field: string path = 5;
   */
  path: string;
};

/**
 * Describes the message shareedit.SelectionPosMessage.
 * Use `create(SelectionPosMessageSchema)` to create a new message.
 */
export const SelectionPosMessageSchema: GenMessage<SelectionPosMessage> = /*@__PURE__*/
  messageDesc(file_shareedit, 2);

/**
 * ExecuteCommand message for executing commands
 *
 * @generated from message shareedit.ExecuteCommandMessage
 */
export type ExecuteCommandMessage = Message<"shareedit.ExecuteCommandMessage"> & {
  /**
   * command to execute
   *
   * @generated from field: string command = 1;
   */
  command: string;

  /**
   * command arguments
   *
   * @generated from field: repeated string args = 2;
   */
  args: string[];
};

/**
 * Describes the message shareedit.ExecuteCommandMessage.
 * Use `create(ExecuteCommandMessageSchema)` to create a new message.
 */
export const ExecuteCommandMessageSchema: GenMessage<ExecuteCommandMessage> = /*@__PURE__*/
  messageDesc(file_shareedit, 3);

/**
 * Empty message for responses that don't need data
 *
 * @generated from message shareedit.Empty
 */
export type Empty = Message<"shareedit.Empty"> & {
};

/**
 * Describes the message shareedit.Empty.
 * Use `create(EmptySchema)` to create a new message.
 */
export const EmptySchema: GenMessage<Empty> = /*@__PURE__*/
  messageDesc(file_shareedit, 4);

/**
 * Define the service for bidirectional communication
 *
 * @generated from service shareedit.ShareEditService
 */
export const ShareEditService: GenService<{
  /**
   * Methods for vim to send messages to vscode
   *
   * @generated from rpc shareedit.ShareEditService.SendTextContent
   */
  sendTextContent: {
    methodKind: "unary";
    input: typeof TextContentMessageSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc shareedit.ShareEditService.SendCursorPos
   */
  sendCursorPos: {
    methodKind: "unary";
    input: typeof CursorPosMessageSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc shareedit.ShareEditService.SendSelectionPos
   */
  sendSelectionPos: {
    methodKind: "unary";
    input: typeof SelectionPosMessageSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc shareedit.ShareEditService.SendExecuteCommand
   */
  sendExecuteCommand: {
    methodKind: "unary";
    input: typeof ExecuteCommandMessageSchema;
    output: typeof EmptySchema;
  },
  /**
   * Methods for vscode to send messages to vim
   *
   * @generated from rpc shareedit.ShareEditService.ReceiveTextContent
   */
  receiveTextContent: {
    methodKind: "bidi_streaming";
    input: typeof TextContentMessageSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc shareedit.ShareEditService.ReceiveCursorPos
   */
  receiveCursorPos: {
    methodKind: "bidi_streaming";
    input: typeof CursorPosMessageSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc shareedit.ShareEditService.ReceiveSelectionPos
   */
  receiveSelectionPos: {
    methodKind: "bidi_streaming";
    input: typeof SelectionPosMessageSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc shareedit.ShareEditService.ReceiveExecuteCommand
   */
  receiveExecuteCommand: {
    methodKind: "bidi_streaming";
    input: typeof ExecuteCommandMessageSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_shareedit, 0);

