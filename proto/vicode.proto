syntax = "proto3";

package vicode;

// Main message wrapper that contains one of the possible message types
message VicodeMessage {
  string sender = 1;  // "vscode" or "vim"

  // Only one of these fields will be set
  oneof payload {
    TextContentPayload text_content = 2;
    CursorPosPayload cursor_pos = 3;
    SelectionPosPayload selection_pos = 4;
    ExecuteCommandPayload execute_command = 5;
  }
}

// TextContent payload for sharing text between vim and vscode
message TextContentPayload {
  string path = 1;        // file path
  string text = 2;        // file content
  int32 cursor_line = 3;  // cursor line position
  int32 cursor_col = 4;   // cursor column position
}

// CursorPos payload for sharing cursor position
message CursorPosPayload {
  string path = 1;    // file path
  int32 line = 2;     // line position
  int32 col = 3;      // column position
}

// SelectionPos payload for sharing selection position
message SelectionPosPayload {
  string path = 1;       // file path
  int32 start_line = 2;  // selection start line
  int32 start_col = 3;   // selection start column
  int32 end_line = 4;    // selection end line
  int32 end_col = 5;     // selection end column
}

// ExecuteCommand payload for executing commands
message ExecuteCommandPayload {
  string command = 1;        // command to execute
  repeated string args = 2;  // command arguments
}

// Empty message for responses that don't need data
message Empty {}

// Define the service for bidirectional communication
service ViCodeService {
  // Send a message from vim to vscode
  rpc SendMessage(VicodeMessage) returns (Empty);

  // Receive messages from vscode to vim
  rpc ReceiveMessage(stream VicodeMessage) returns (stream Empty);
}
